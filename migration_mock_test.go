// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamillosantos/migrations (interfaces: Source,Target,Migration,RunnerReporter)

// Package migrations is a generated GoMock package.
package migrations

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// ByID mocks base method.
func (m *MockSource) ByID(arg0 string) (Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", arg0)
	ret0, _ := ret[0].(Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID.
func (mr *MockSourceMockRecorder) ByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockSource)(nil).ByID), arg0)
}

// List mocks base method.
func (m *MockSource) List() ([]Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSourceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSource)(nil).List))
}

// MockTarget is a mock of Target interface.
type MockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockTargetMockRecorder
}

// MockTargetMockRecorder is the mock recorder for MockTarget.
type MockTargetMockRecorder struct {
	mock *MockTarget
}

// NewMockTarget creates a new mock instance.
func NewMockTarget(ctrl *gomock.Controller) *MockTarget {
	mock := &MockTarget{ctrl: ctrl}
	mock.recorder = &MockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarget) EXPECT() *MockTargetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTarget) Add(arg0 Migration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTargetMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTarget)(nil).Add), arg0)
}

// Create mocks base method.
func (m *MockTarget) Create() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTargetMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTarget)(nil).Create))
}

// Current mocks base method.
func (m *MockTarget) Current() (Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockTargetMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockTarget)(nil).Current))
}

// Destroy mocks base method.
func (m *MockTarget) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockTargetMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockTarget)(nil).Destroy))
}

// Done mocks base method.
func (m *MockTarget) Done() ([]Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].([]Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Done indicates an expected call of Done.
func (mr *MockTargetMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTarget)(nil).Done))
}

// Remove mocks base method.
func (m *MockTarget) Remove(arg0 Migration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTargetMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTarget)(nil).Remove), arg0)
}

// MockMigration is a mock of Migration interface.
type MockMigration struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationMockRecorder
}

// MockMigrationMockRecorder is the mock recorder for MockMigration.
type MockMigrationMockRecorder struct {
	mock *MockMigration
}

// NewMockMigration creates a new mock instance.
func NewMockMigration(ctrl *gomock.Controller) *MockMigration {
	mock := &MockMigration{ctrl: ctrl}
	mock.recorder = &MockMigrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigration) EXPECT() *MockMigrationMockRecorder {
	return m.recorder
}

// CanUndo mocks base method.
func (m *MockMigration) CanUndo() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUndo")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanUndo indicates an expected call of CanUndo.
func (mr *MockMigrationMockRecorder) CanUndo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUndo", reflect.TypeOf((*MockMigration)(nil).CanUndo))
}

// Description mocks base method.
func (m *MockMigration) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockMigrationMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockMigration)(nil).Description))
}

// Do mocks base method.
func (m *MockMigration) Do(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockMigrationMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockMigration)(nil).Do), arg0)
}

// ID mocks base method.
func (m *MockMigration) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockMigrationMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockMigration)(nil).ID))
}

// Next mocks base method.
func (m *MockMigration) Next() Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(Migration)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockMigrationMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockMigration)(nil).Next))
}

// Previous mocks base method.
func (m *MockMigration) Previous() Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous")
	ret0, _ := ret[0].(Migration)
	return ret0
}

// Previous indicates an expected call of Previous.
func (mr *MockMigrationMockRecorder) Previous() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockMigration)(nil).Previous))
}

// SetNext mocks base method.
func (m *MockMigration) SetNext(arg0 Migration) Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNext", arg0)
	ret0, _ := ret[0].(Migration)
	return ret0
}

// SetNext indicates an expected call of SetNext.
func (mr *MockMigrationMockRecorder) SetNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockMigration)(nil).SetNext), arg0)
}

// SetPrevious mocks base method.
func (m *MockMigration) SetPrevious(arg0 Migration) Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrevious", arg0)
	ret0, _ := ret[0].(Migration)
	return ret0
}

// SetPrevious indicates an expected call of SetPrevious.
func (mr *MockMigrationMockRecorder) SetPrevious(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrevious", reflect.TypeOf((*MockMigration)(nil).SetPrevious), arg0)
}

// String mocks base method.
func (m *MockMigration) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMigrationMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMigration)(nil).String))
}

// Undo mocks base method.
func (m *MockMigration) Undo(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Undo indicates an expected call of Undo.
func (mr *MockMigrationMockRecorder) Undo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undo", reflect.TypeOf((*MockMigration)(nil).Undo), arg0)
}

// MockRunnerReporter is a mock of RunnerReporter interface.
type MockRunnerReporter struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerReporterMockRecorder
}

// MockRunnerReporterMockRecorder is the mock recorder for MockRunnerReporter.
type MockRunnerReporterMockRecorder struct {
	mock *MockRunnerReporter
}

// NewMockRunnerReporter creates a new mock instance.
func NewMockRunnerReporter(ctrl *gomock.Controller) *MockRunnerReporter {
	mock := &MockRunnerReporter{ctrl: ctrl}
	mock.recorder = &MockRunnerReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerReporter) EXPECT() *MockRunnerReporterMockRecorder {
	return m.recorder
}

// AfterExecute mocks base method.
func (m *MockRunnerReporter) AfterExecute(arg0 ActionType, arg1 Migration, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterExecute", arg0, arg1, arg2)
}

// AfterExecute indicates an expected call of AfterExecute.
func (mr *MockRunnerReporterMockRecorder) AfterExecute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterExecute", reflect.TypeOf((*MockRunnerReporter)(nil).AfterExecute), arg0, arg1, arg2)
}

// BeforeExecute mocks base method.
func (m *MockRunnerReporter) BeforeExecute(arg0 ActionType, arg1 Migration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeExecute", arg0, arg1)
}

// BeforeExecute indicates an expected call of BeforeExecute.
func (mr *MockRunnerReporterMockRecorder) BeforeExecute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeExecute", reflect.TypeOf((*MockRunnerReporter)(nil).BeforeExecute), arg0, arg1)
}
