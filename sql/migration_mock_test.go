// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamillosantos/migrations/v2 (interfaces: Source,Migration)
//
// Generated by this command:
//
//	mockgen -package sql -destination migration_mock_test.go github.com/jamillosantos/migrations/v2 Source,Migration
//

// Package sql is a generated GoMock package.
package sql

import (
	context "context"
	reflect "reflect"

	migrations "github.com/jamillosantos/migrations/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
	isgomock struct{}
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSource) Add(ctx context.Context, migration migrations.Migration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, migration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSourceMockRecorder) Add(ctx, migration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSource)(nil).Add), ctx, migration)
}

// Load mocks base method.
func (m *MockSource) Load(ctx context.Context) (migrations.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx)
	ret0, _ := ret[0].(migrations.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockSourceMockRecorder) Load(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSource)(nil).Load), ctx)
}

// MockMigration is a mock of Migration interface.
type MockMigration struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationMockRecorder
	isgomock struct{}
}

// MockMigrationMockRecorder is the mock recorder for MockMigration.
type MockMigrationMockRecorder struct {
	mock *MockMigration
}

// NewMockMigration creates a new mock instance.
func NewMockMigration(ctrl *gomock.Controller) *MockMigration {
	mock := &MockMigration{ctrl: ctrl}
	mock.recorder = &MockMigrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigration) EXPECT() *MockMigrationMockRecorder {
	return m.recorder
}

// CanUndo mocks base method.
func (m *MockMigration) CanUndo() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUndo")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanUndo indicates an expected call of CanUndo.
func (mr *MockMigrationMockRecorder) CanUndo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUndo", reflect.TypeOf((*MockMigration)(nil).CanUndo))
}

// Description mocks base method.
func (m *MockMigration) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockMigrationMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockMigration)(nil).Description))
}

// Do mocks base method.
func (m *MockMigration) Do(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockMigrationMockRecorder) Do(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockMigration)(nil).Do), ctx)
}

// ID mocks base method.
func (m *MockMigration) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockMigrationMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockMigration)(nil).ID))
}

// Next mocks base method.
func (m *MockMigration) Next() migrations.Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(migrations.Migration)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockMigrationMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockMigration)(nil).Next))
}

// Previous mocks base method.
func (m *MockMigration) Previous() migrations.Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous")
	ret0, _ := ret[0].(migrations.Migration)
	return ret0
}

// Previous indicates an expected call of Previous.
func (mr *MockMigrationMockRecorder) Previous() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockMigration)(nil).Previous))
}

// SetNext mocks base method.
func (m *MockMigration) SetNext(arg0 migrations.Migration) migrations.Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNext", arg0)
	ret0, _ := ret[0].(migrations.Migration)
	return ret0
}

// SetNext indicates an expected call of SetNext.
func (mr *MockMigrationMockRecorder) SetNext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockMigration)(nil).SetNext), arg0)
}

// SetPrevious mocks base method.
func (m *MockMigration) SetPrevious(arg0 migrations.Migration) migrations.Migration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrevious", arg0)
	ret0, _ := ret[0].(migrations.Migration)
	return ret0
}

// SetPrevious indicates an expected call of SetPrevious.
func (mr *MockMigrationMockRecorder) SetPrevious(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrevious", reflect.TypeOf((*MockMigration)(nil).SetPrevious), arg0)
}

// String mocks base method.
func (m *MockMigration) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMigrationMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMigration)(nil).String))
}

// Undo mocks base method.
func (m *MockMigration) Undo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Undo indicates an expected call of Undo.
func (mr *MockMigrationMockRecorder) Undo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undo", reflect.TypeOf((*MockMigration)(nil).Undo), ctx)
}
